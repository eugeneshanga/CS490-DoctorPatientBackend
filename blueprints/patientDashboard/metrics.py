from flask import Blueprint, jsonify, request
import mysql.connector
from config import DB_CONFIG

patient_dashboard_metrics_bp = Blueprint('patient_dashboard_metrics', __name__, url_prefix='/api/patient-dashboard/metrics')


@patient_dashboard_metrics_bp.route('/submit', methods=['POST'])
def submit_medical_metrics():
    """
    Endpoint for a patient to submit their daily survey results into the medical_metrics table.
    Expects JSON with:
      - user_id: The ID of the user (patient)
      - weight: The patient's weight (decimal)
      - height: The patient's height (decimal)
      - caloric_intake: The patient's daily caloric intake (integer)

    The recorded_at field is autogenerated.
    """
    data = request.get_json()
    user_id = data.get('user_id')
    weight = data.get('weight')
    height = data.get('height')
    caloric_intake = data.get('caloric_intake')

    if not user_id or weight is None or height is None or caloric_intake is None:
        return jsonify({"error": "Missing required fields: user_id, weight, height, caloric_intake"}), 400

    try:
        connection = mysql.connector.connect(**DB_CONFIG)
        cursor = connection.cursor(dictionary=True)

        # Convert user_id to patient_id
        cursor.execute("SELECT patient_id FROM patients WHERE user_id = %s", (user_id,))
        patient = cursor.fetchone()
        if not patient:
            return jsonify({"error": "Patient not found for given user_id"}), 404
        patient_id = patient["patient_id"]

        meal_plan_ids = data.get('meal_plan_ids', [])  # List of meal_plan_id integers
        extra_calories = data.get('extra_calories', 0)  # Optional
        if not isinstance(extra_calories, int):
            extra_calories = 0

        # Compute total calories: caloric_intake from form + extras
        total_calories = caloric_intake + extra_calories

        # Insert into medical_metrics
        sql = """
            INSERT INTO medical_metrics (patient_id, weight, height, caloric_intake)
            VALUES (%s, %s, %s, %s)
        """
        cursor.execute(sql, (patient_id, weight, height, total_calories))
        connection.commit()
        metric_id = cursor.lastrowid

        # Insert selected meals into metric_meal_entries
        for meal_id in meal_plan_ids:
            cursor.execute("""
                INSERT INTO metric_meal_entries (metric_id, meal_plan_id)
                VALUES (%s, %s)
            """, (metric_id, meal_id))

        cursor.close()
        connection.close()

        return jsonify({"message": "Medical metrics submitted successfully", "metric_id": metric_id}), 201

    except mysql.connector.Error as err:
        return jsonify({"error": str(err)}), 500


@patient_dashboard_metrics_bp.route('/graph-data', methods=['GET'])
def get_graph_data():
    """
    Endpoint to fetch graph data for weight and caloric intake over time.
    Expects a query parameter 'user_id'. Converts user_id to patient_id.

    Returns a JSON object with:
      - weight_data: list of objects with keys 'date' and 'weight'
      - caloric_intake_data: list of objects with keys 'date' and 'calories'

    Example response:
    {
      "weight_data": [
         {"date": "2025-04-10", "weight": 70.5},
         {"date": "2025-04-11", "weight": 70.8}
      ],
      "caloric_intake_data": [
         {"date": "2025-04-10", "calories": 2200},
         {"date": "2025-04-11", "calories": 2100}
      ]
    }
    """
    user_id = request.args.get('user_id', type=int)
    if not user_id:
        return jsonify({"error": "user_id query parameter is required"}), 400

    try:
        connection = mysql.connector.connect(**DB_CONFIG)
        cursor = connection.cursor(dictionary=True)

        # Convert user_id to patient_id
        cursor.execute("SELECT patient_id FROM patients WHERE user_id = %s", (user_id,))
        patient = cursor.fetchone()
        if not patient:
            return jsonify({"error": "Patient not found for given user_id"}), 404
        patient_id = patient["patient_id"]

        # Query medical_metrics for the patient.
        sql = """
            SELECT DATE(recorded_at) AS date, weight, caloric_intake
            FROM medical_metrics
            WHERE patient_id = %s
            ORDER BY recorded_at ASC
        """
        cursor.execute(sql, (patient_id,))
        metrics = cursor.fetchall()

        weight_data = []
        caloric_intake_data = []
        for row in metrics:
            # Convert the date to ISO format string for JSON compatibility.
            date_str = row["date"].isoformat() if hasattr(row["date"], 'isoformat') else str(row["date"])
            weight_data.append({"date": date_str, "weight": row["weight"]})
            caloric_intake_data.append({"date": date_str, "calories": row["caloric_intake"]})

        cursor.close()
        connection.close()

        return jsonify({
            "weight_data": weight_data,
            "caloric_intake_data": caloric_intake_data
        }), 200

    except mysql.connector.Error as err:
        return jsonify({"error": str(err)}), 500


@patient_dashboard_metrics_bp.route('/latest-height', methods=['GET'])
def get_latest_height():
    """
    Endpoint to retrieve the latest recorded height for a patient.
    Expects a query parameter 'user_id'. Converts user_id to patient_id,
    then fetches the latest (most recent) height from the medical_metrics table.

    Returns a JSON object:
      {
         "latest_height": 1.80
      }
    """
    user_id = request.args.get('user_id', type=int)
    if not user_id:
        return jsonify({"error": "user_id query parameter is required"}), 400

    try:
        connection = mysql.connector.connect(**DB_CONFIG)
        cursor = connection.cursor(dictionary=True)

        # Convert user_id to patient_id
        cursor.execute("SELECT patient_id FROM patients WHERE user_id = %s", (user_id,))
        patient = cursor.fetchone()
        if not patient:
            return jsonify({"error": "Patient not found for given user_id"}), 404
        patient_id = patient["patient_id"]

        # Fetch the latest recorded height by ordering by recorded_at descending.
        sql = """
            SELECT height
            FROM medical_metrics
            WHERE patient_id = %s
            ORDER BY recorded_at DESC
            LIMIT 1
        """
        cursor.execute(sql, (patient_id,))
        result = cursor.fetchone()

        cursor.close()
        connection.close()

        if result:
            return jsonify({"latest_height": result["height"]}), 200
        else:
            return jsonify({"error": "No metrics found for this patient"}), 404

    except mysql.connector.Error as err:
        return jsonify({"error": str(err)}), 500
