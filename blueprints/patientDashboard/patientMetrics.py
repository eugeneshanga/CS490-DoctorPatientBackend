from flask import Blueprint, jsonify, request
import mysql.connector
from config import DB_CONFIG

patient_dashboard_metrics_bp = Blueprint('patient_dashboard_metrics', __name__, url_prefix='/api/patient-dashboard/metrics')


@patient_dashboard_metrics_bp.route('/submit', methods=['POST'])
def submit_medical_metrics():
    """
    Endpoint for a patient to submit their daily survey results into the medical_metrics table.
    Expects JSON with:
      - user_id: The ID of the user (patient)
      - weight: The patient's weight (decimal)
      - height: The patient's height (decimal)
      - caloric_intake: The patient's daily caloric intake (integer)

    The recorded_at field is autogenerated.
    """
    data = request.get_json()
    user_id = data.get('user_id')
    weight = data.get('weight')
    height = data.get('height')
    caloric_intake = data.get('caloric_intake')

    if not user_id or weight is None or height is None or caloric_intake is None:
        return jsonify({"error": "Missing required fields: user_id, weight, height, caloric_intake"}), 400

    try:
        connection = mysql.connector.connect(**DB_CONFIG)
        cursor = connection.cursor(dictionary=True)

        # Convert user_id to patient_id
        cursor.execute("SELECT patient_id FROM patients WHERE user_id = %s", (user_id,))
        patient = cursor.fetchone()
        if not patient:
            return jsonify({"error": "Patient not found for given user_id"}), 404
        patient_id = patient["patient_id"]

        # Insert into medical_metrics; recorded_at is auto-generated by MySQL.
        sql = """
            INSERT INTO medical_metrics (patient_id, weight, height, caloric_intake)
            VALUES (%s, %s, %s, %s)
        """
        cursor.execute(sql, (patient_id, weight, height, caloric_intake))
        connection.commit()
        metric_id = cursor.lastrowid

        cursor.close()
        connection.close()

        return jsonify({"message": "Medical metrics submitted successfully", "metric_id": metric_id}), 201

    except mysql.connector.Error as err:
        return jsonify({"error": str(err)}), 500
